//! 큐란?
// 1. FIFO라는 개념을 가진 선형 자료구조이다. ( 선입선출 )
// 2. Linear Queue와 Circular Queue가 존재한다.
// 3. Front ( 맨 앞 ), Rear ( 맨 뒤 )가 있다.
// 4. Dequeue( push ), Enqueue( pop )으로 불린다.

=========================================================================================================================================================

//! 선형 큐( Linear Queue )

//? 배열 표현법과 Linked List 표현법이 있다.

//! Array로 구현
/*
    class Queue {
        constructor() {
            this.queue = [];
            this.front = 0;
            this.rear = 0;
        }
    }

    enqueue(value) {
        this.queue[this.rear++] = value;
    }

    dequeue() {
        const value = this.queue[this.front];
        delete this.queue[this.front];
        this.front += 1;
        return value;
    }

    peek() {
        return this.queue[this.front];
    }

    size() {
        return this.rear - this.front;
    }
*/

//! Linked List로 구현
/*
    class Node {
        constructor(value) {
            this.value = value;
            this.next = null;
        }
    }

    class Queue {
        constructor() {
            this.head = null;
            this.tail = null;
            this.size = 0;
        }

        enqueue(value) {
            const newNode = new Node(value);

            if(this.head === null) {
                this.head = this.tail = newNode;
            } else {
                this.tail.next = newNode;
                this.tail = newNode;
            }

            this.size += 1;
        }

        dequeue() {
            const value = this.head.value;
            this.head = this.head.next;
            this.size -= 1;
            return value;
        }

        peek() {
            return this.head.value;
        }
    }
*/

=========================================================================================================================================================

//! 환형 큐
//? Front와 Rear가 이어져있는 Queue
//? Linked List로 구현하면 큰 이점이 없다.

//! 배열 구현
/*
    class Queue {
        constructor(maxSize) {
            this.maxSize = maxSize;
            this.queue = [];
            this.front = 0;
            this.rear = 0;
            this.size = 0;
        }

        enqueue(value) {
            if(this.isFull()) {
                console.log("Queue is full.");
                return;
            }

            this.queue[this.rear] = value;
            this.rear = (this.rear + 1) % this.maxSize;
            this.size += 1;
        }

        dequeue() {
            const value = this.queue[this.front];
            delete this.queue[this.front];
            this.size -= 1;
            return value;
        }

        isFull() {
            return this.size === this.maxSize;
        }

        peek() {
            return this.queue[this.front];
        }
    }
*/